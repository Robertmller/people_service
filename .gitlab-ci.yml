stages:
  - test
  - build
  - deployToAws

test:
  stage: test
  image: python:3.8.10
  script:
    - echo "Testing..."

build:
  stage: build
  image: docker
  only:
    - origin/robert-connectionbackend
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:peopleServiceByRobert" .
    - docker push "$CI_REGISTRY_IMAGE:peopleServiceByRobert"
    - echo "Docker Build..."

deployToAws:
  stage: deployToAws
  image: alpine
  only:
    - origin/robert-connectionbackend
  variables:
    SERVER: $SERVER_IP_ROBERT
    PORT: $SERVER_PORT_ROBERT
  script:
    - echo "Deploying..."
    - apk add openssh
    - apk add bash
    - mkdir ~/.ssh
    - echo "$SSH_KNOWN_HOSTS_ROBERT" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY_ROBERT")'

    - scp $ENV_ROBERT ubuntu@$SERVER:.env

    - ssh ubuntu@$SERVER "echo $CI_BUILD_TOKEN | docker login --username gitlab-ci-token --password-stdin registry.gitlab.com"

    - ssh ubuntu@$SERVER "echo $CI_BUILD_TOKEN | docker login --username gitlab-ci-token --password-stdin registry.gitlab.com"
    # stop container, remove image.
    - ssh ubuntu@$SERVER "docker container stop peopleServiceByRobert" || true
    - ssh ubuntu@$SERVER "docker container rm peopleServiceByRobert" || true
    - ssh ubuntu@$SERVER "docker image rm ${CI_REGISTRY_IMAGE}:peopleServiceByRobert" || true
    # start new container
    - ssh ubuntu@$SERVER "docker run  -v /home/ubuntu/.env:/code/.env  --name peopleServiceByRobert -p $PORT:80 -d ${CI_REGISTRY_IMAGE}:peopleServiceByRobert"
    - echo "AWS Deploying..."
